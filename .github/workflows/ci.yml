name: CI
on:
  pull_request:
    paths:
      - packages/**
  workflow_dispatch:
    inputs:
      packages-to-test:
        description: 'Packages to test (space-separated)'
        required: true
        default: 'ALL'
      spack-packages-ref:
        description: 'spack-packages ref to use'
        required: true
      spack-config-ref:
        description: 'spack-config ref to use'
        required: true
      spack-ref:
        description: 'spack ref to use'
        required: true
jobs:
  setup-ci:
    name: Setup CI
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      spack-packages-ref: ${{ steps.set-refs.outputs.spack-packages-ref }}
      spack-config-ref: ${{ steps.set-refs.outputs.spack-config-ref }}
      spack-ref: ${{ steps.set-refs.outputs.spack-ref }}
    steps:
      - name: Checkout spack-packages
        uses: actions/checkout@v4

      - name: PR - Get packages
        id: set-matrix-pr
        if: github.event_name == 'pull_request'
        uses: tj-actions/changed-files@ed68ef82c095e0d48ec87eccea555d944a631a4c  # v46.0.5
        with:
          # We only care about the directory names under packages/ - since they are also the package names
          # and we want to find changes the package.py files in those directories
          dir_names: true
          path: ./packages
          files: '*/package.py'

      - name: Dispatch - Get packages
        id: set-matrix-dispatch
        if: github.event_name == 'workflow_dispatch'
        # Either get all packages defined (all subfolders under packages/) or use the input
        run: |
          if [[ "${{ inputs.packages-to-test }}" == "ALL" ]]; then
            echo "pkgs=$(find packages/ -mindepth 1 -maxdepth 1 -type d -printf '%P ')" >> $GITHUB_OUTPUT
          else
            echo "pkgs="${{ inputs.packages-to-test }}" >> $GITHUB_OUTPUT
          fi

      - name: Setup Matrix
        id: set-matrix
        # Get all packages that will be tested, then
        # Get file paths to manifests for each package, then finally
        # Convert into a JSON array for the matrix, one of the form:
        # { "filepaths": [
        #   ".github/build-ci/manifests/mom5/intel.spack.yaml.j2",
        #   ".github/build-ci/manifests/mom5/amd.spack.yaml.j2",
        #   ".github/build-ci/manifests/cice5/spack.yaml.j2",
        #   ...
        # ] }
        run: |
          pkgs="${{ steps.set-matrix-pr.outputs.all_changed_files || steps.set-matrix-dispatch.outputs.pkgs }}"

          filepaths=$(for pkg in $pkgs; do find .github/build-ci/manifests/$pkg -type f; done)

          echo "matrix=$(echo $filepaths | jq -crR 'split(" ")')" >> $GITHUB_OUTPUT

      - name: Set refs
        id: set-refs
        run: |
          echo "spack-packages-ref=${{  inputs.spack-packages-ref || github.event.pull_request.head.sha }}" >> $GITHUB_OUTPUT
          echo "spack-config-ref=${{ inputs.spack-config-ref || 'main' }}" >> $GITHUB_OUTPUT
          echo "spack-ref=${{ inputs.spack-ref || 'releases/v0.22' }}" >> $GITHUB_OUTPUT

  ci:
    name: CI
    needs:
      - setup-ci
    strategy:
      fail-fast: false
      max-parallel: 3
      matrix:
        filepath: ${{ fromJson(needs.setup-ci.outputs.matrix) }}
    uses: access-nri/build-ci/.github/workflows/ci.yml@v2
    with:
      spack-manifest-path: ${{ matrix.filepath }}
      spack-packages-ref: ${{ needs.setup-ci.outputs.spack-packages-ref }}
      spack-config-ref: ${{ needs.setup-ci.outputs.spack-config-ref }}
      spack-ref: ${{ needs.setup-ci.outputs.spack-ref }}
